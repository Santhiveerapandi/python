class(d)
# 5. Character vector
e <- c("Right now", 'it is', '10:15 am')
e
class(e)
a
a[1]
a[1:3]
a[c(1,4)]
h<- list(23,21.3,c(1,2,3), "hello", TRUE, 3+9i,2L)
h
class(h)
h[1]
h[2]
h[3]
h[3][1]
h[[3]][1]
h[1:3]
View(h)
i <- matrix(c(10, 20, 30), nrow=3, ncol=2,byrow=FALSE)
#default value of byrow is False
class(i)
View(i)
i
# Accessing elements of a matrix
i[3,2]
#Array - while matrix are confined to 2 dimensions, arrays can be of any number
#of dimensions.
?array
j <-array(c("R","Programming","session"),dim = c(2,5,4))
j
class(j)
#accessing an Array
j[,,4] #4th array
# Accessing individual element from an array
j[2,4,4] #2nd row 5th column, 4th array
#Factor - Variable which can take certain values(levels) and not any
k <- c("red","green","blue","blue","red","orange")
x <- factor(k)
x
class(x)
# Data Frame
# unlike a matrix in data frame each column can contain different mode of data
# it is a list of vectors of equal length
m<- data.frame(gender = c("Male","Male","Female"), height = c(152,171.5,165),
weight= c(81,93,67), Age = c(42,38,25))
class(m)
m
view(m)
View(m)
#accessing column / features of data frame
m[3]
# Accessing elements of a data frame
m$height
m$gender
m$gender[3]
m[2]
m[[2]]
m[[2]][2]
m[c(1,2), c(2,3)] # accessing multiple items from a data frame
m[2,]
# variables or objects in R
var_name2. <-1
var.name <- 3
#assignment using leftward operator
var.1 <- c("R", "Programming")
var.1
#assignment using rightward operator
c(TRUE,1) -> var.2
var.2
#Assignment using equal operator
var.3 = c(0,1,2,3)
var.3
# Finding variables in Environment
?ls
ls()
a<-3
ls(pattern = "var") #displays variable which var text in it
ls(all.name=TRUE) # also display hidden starting with .) variables
#Deleting variable
rm(a)
ls(all.name=TRUE) # also display hidden starting with .) variables
13%%4
13%/%4
2^3
# 1. > greater than
q[1] > r[2]
# Relational operators -returns boolean values
q <- c(1, 3, 4, 3, 2)
r <- c(2, 4, 4, 5, 2)
# 1. > greater than
q[1] > r[2]
# 2. < lesser than
q<r
# 3. == equal to
q == r
# 4. >= greater than or equal to
q<=r
q>=r
# 5. != not equal to
q!=r
# Logical Operators
# condition: all numbers greater than 1 are considered as logical value TRUE
s <- c(0, 1, TRUE, 2+2i)
t <- c(4, 1, FALSE, 2+3i)
#1. & Element wise Logical AND
s&t
#2. | Element wise Logical OR
s|t
#3. ! Logical Not - can be applied on a single vector
!(s&t)
!(s|t)
# logical operators (&& || considers only 1st element of the vectors and give a vector of
# single element as output)
# 4. && logical AND
u <- c(3, 0, TRUE, 2+2i)
v <- c(1, 3, TRUE, 2+3i)
u&&v
# 5. || Logical OR
x <- c(0,0,TRUE,2+2i)
y <- c(0,3,TRUE,2+3i)
x||y
v6<-1.3:10:3
v6
# 2. %in% - an element belongs to a vector
v7<- c(8,9,10)
v8<- c(12,13,14)
t<-1:10
v7%in%t
v8%in% t
#3. %%- Multiply a matrix with its transpose
v9 <- matrix(c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
v9
t(v9)
v9t <- v9 %% t(v9)
v9t <- v9 %*% t(v9)
v9t
x<-4
if(x>0) {
print("Positive number")
print(x)
}
# There is an easier way to use if..else statement specifically for vectors in R Programming
# Syntax: ifelse(test_expression, x, y)
a =c(5,7,2,9)
help()
?ifelse
ifelse(a %%2==0,"even","odd")
#for more than 2 conditions
client<-c("private","public","other","private")
ifelse(client=="private", 1.12, ifelse(client =="other", 1.06,1))
i <- 1
while(i<6){
print(i)
i=i+1
}
v <- c("Hello")
cnt <- 5
repeat {
print(v)
cnt <- cnt+1
if(cnt > 5) {
break
}
}
v <- LETTERS[1:4]
v
for ( a in v) {
print(a)
}
for (i in 1:length(v)){
print(v[i])
}
# Loop Control Statements
# break Statement - terminates the loop statement and transfers execution to the statement
# immediately following the loop
v <- c("Hello","loop")
cnt <- 2
repeat {
print(v)
cnt <- cnt + 1
if(cnt > 5) {
break
}
}
# Importing Cars dataset
############################################################
data = read.csv(file.choose())
View(data)
summary(data)
# next Statement - useful when we want to skip the current iteration of a loop without terminating it
v <- LETTERS[1:6]
for ( i in v) {
if (i == "E") {
next
}
print(i)
}
# User-defined Function
new.function <- function(a) {
for(i in 1:a) {
b <- i^2
print(b)
}
}
# Calling a Function
new.function(10)
mySamples <- c(29, 4, 5, 7, 29, 19, 29, 13, 25, 19)
mean(mySamples)
median(mySamples)
mode(mySamples)
library(modeest)
install.packages("modeest")
library(modeest)
library(modeest)
mlv(mySamples, method = "mfv")
mean(mySamples)
median(mySamples)
gc()
install.packages("dplyr")
install.packages("ggplot2")
# Join (Merge) data frames (inner, outer, left, right)
df1 = data.frame(CustomerId = c(1:6), Product = c(rep("Oven", 3), rep("Television", 3)))
df1
df2 = data.frame(CustomerId = c(2, 4, 6,7), State = c(rep("California", 3), rep("Texas", 1)))
df2
# Merging happens based on the common column name in both the data sets
# Inner Join
df<-merge(x=df1,y=df2,by="CustomerId")
df
# Outer Join
df<-merge(x=df1,y=df2,by="CustomerId",all=TRUE)
df
x<-c(8,'Oven','California') # cbind is used to combine column wise
df3<-rbind(df,x) # it is used to combine rows in data frame
df3
# Left outer join
df<-merge(x=df1,y=df2,by="CustomerId",all.x=TRUE)
df
# Right outer join
df<-merge(x=df1,y=df2,by="CustomerId",all.y=TRUE)
df
# Cross join
df<-merge(x = df1, y = df2, by = NULL)
df
data("iris")
View(iris)
install.packages("twitteR")
install.packages("RJSONIO")
install.packages("stringr")
install.packages("RCurl")
library(twitteR)
library(RJSONIO)
library(stringr)
library(RCurl)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
sfdc_tweet<-searchTwitter("Salesforce")
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
sfdc_tweet<-searchTwitter("Salesforce")
sfdc_tweet<-searchTwitter("Salesforce",n=50)
sfdc_tweet<-searchTwitter("Salesforce",n=50)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
sfdc_tweet<-searchTwitter("Salesforce",n=50)
NVIDIAgpus_search_df = search_tweets(q = "NVIDIA AND GPU OR NVIDIA", n = 2500)
install.packages("rtweet")
library(rtweet)
library(dplyr)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyverse", "XQuartz", "tidygraph", "rtweet", "ggraph", "tidytext", "stopwords", "sentimentr", "lubridate", "textfeatures", "wordcloud", "RColorBrewer", "academicTwitterR", "dotwhisker", "jtools")
ipak(packages)
packages <- c("rtweet", "plyr")
ipak(packages)
install.packages("academictwitteR")
library(academictwitterR)
library(rtweet)
## load the tidyverse
library(tidyverse)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "bBLxDJLMjjFmXkqncJfqD3tzj"
api_secret_key <- "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG"
## authenticate via web browser
token <- create_token(
app = "",
consumer_key = api_key,
consumer_secret = api_secret_key)
library(rtweet)
## load the tidyverse
library(tidyverse)
## store api keys (these are fake example values; replace with your own keys)
api_key <- "bBLxDJLMjjFmXkqncJfqD3tzj"
api_secret_key <- "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG"
## authenticate via web browser
token <- create_token(
app = "",
consumer_key = api_key,
consumer_secret = api_secret_key)
library(twitteR)
#library(RJSONIO)
#library(stringr)
#library(RCurl)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
#sfdc_tweet<-searchTwitter("Salesforce",n=50)
getUser("sanpandi")
#sfdc_tweet<-searchTwitter("Salesforce",n=50)
getUser("imVkohli")
library(twitteR)
#library(RJSONIO)
#library(stringr)
#library(RCurl)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
#sfdc_tweet<-searchTwitter("Salesforce",n=50)
getUser("imVkohli")
library(twitteR)
#library(RJSONIO)
#library(stringr)
#library(RCurl)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
#sfdc_tweet<-searchTwitter("Salesforce",n=50)
getUser("@imVkohli")
install.packages("academictwitteR")
library(academictwitterR)
install.packages("Rtools")
install.packages("academictwitteR")
library(academictwitterR)
library(academictwitteR)
create_token(
app = "K_SanthiVeeraPandi_MCA_PHP",
consumer_key = "bBLxDJLMjjFmXkqncJfqD3tzj",
consumer_secret = "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG",
access_token = "167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS",
access_secret = "1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL",
set_renv = TRUE
)
#Create Twitter Token with Academic Account, see https://github.com/cjbarrie/academictwitteR
set_bearer()
#### Getting Profile ####
steverathje2 <- get_timeline("steverathje2", n = 200)
tweets <- search_tweets("steve OR bob", n = 100, include_rts = FALSE, geocode = lookup_coords("usa"))
#right-leaning low quality news sites
infowars <- search_tweets("infowars.com*", n = 3200)
brietbart <- search_tweets("breitbart.com*", n = 3200)
steverathje2 <- get_timeline("sanpandi", n = 200)
library(academictwitterR)
#### How to get Twitter Data ####
#Information about rtweet: https://github.com/cran/rtweet
#Apply for twitter API account: https://developer.twitter.com/en/apply-for-access
#Create Twitter Token With Regular Account
#Enter your credentials from the Twitter API below
create_token(
app = "K_SanthiVeeraPandi_MCA_PHP",
consumer_key = "bBLxDJLMjjFmXkqncJfqD3tzj",
consumer_secret = "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG",
access_token = "167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS",
access_secret = "1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL",
set_renv = TRUE
)
#Create Twitter Token with Academic Account, see https://github.com/cjbarrie/academictwitteR
set_bearer()
#### Getting Profile ####
steverathje2 <- get_timeline("sanpandi", n = 200)
tweets <-
get_all_tweets(
query = "#fakenews",
start_tweets = "2020-01-01T00:00:00Z",
end_tweets = "2020-01-05T00:00:00Z",
file = "fakenews"
)
steverathje2 <- get_timeline("Sanpandi", n = 200)
install.packages("academictwitteR")
library(academictwitterR)
install.packages("academictwitteR")
library(academictwitterR)
library(academictwitteR)
create_token(
app = "K_SanthiVeeraPandi_MCA_PHP",
consumer_key = "bBLxDJLMjjFmXkqncJfqD3tzj",
consumer_secret = "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG",
access_token = "167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS",
access_secret = "1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL",
set_renv = TRUE
)
#Set Working Directory
#setwd("/Users/steverathje/Desktop/Twitter\ Workshop")
setwd("E:\projects\python\R\twitter\steve")
#Set Working Directory
#setwd("/Users/steverathje/Desktop/Twitter\ Workshop")
setwd("E:\\projects\\python\\R\\twitter\\steve")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
packages <- c("tidyverse", "XQuartz", "tidygraph", "rtweet", "ggraph", "tidytext", "stopwords", "sentimentr", "lubridate", "textfeatures", "wordcloud", "RColorBrewer", "academicTwitterR", "dotwhisker", "jtools")
ipak(packages)
packages <- c("rtweet", "plyr")
ipak(packages)
install.packages("academictwitteR")
install.packages("academictwitteR")
library(academictwitterR)
library(academictwitteR)
create_token(
app = "K_SanthiVeeraPandi_MCA_PHP",
consumer_key = "bBLxDJLMjjFmXkqncJfqD3tzj",
consumer_secret = "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG",
access_token = "167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS",
access_secret = "1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL",
set_renv = TRUE
)
#Create Twitter Token with Academic Account, see https://github.com/cjbarrie/academictwitteR
set_bearer()
1
steverathje2 <- get_timeline("Sanpandi", n = 200)
#Create Twitter Token with Academic Account, see https://github.com/cjbarrie/academictwitteR
set_bearer()
2
#Create Twitter Token with Academic Account, see https://github.com/cjbarrie/academictwitteR
set_bearer()
steverathje2 <- get_timeline("Sanpandi", n = 200)
library(academictwitteR)
#### How to get Twitter Data ####
#Information about rtweet: https://github.com/cran/rtweet
#Apply for twitter API account: https://developer.twitter.com/en/apply-for-access
#Create Twitter Token With Regular Account
#Enter your credentials from the Twitter API below
create_token(
app = "K_SanthiVeeraPandi_MCA_PHP",
consumer_key = "bBLxDJLMjjFmXkqncJfqD3tzj",
consumer_secret = "IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG",
access_token = "167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS",
access_secret = "1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL",
set_renv = TRUE
)
library(twitteR)
#library(RJSONIO)
#library(stringr)
#library(RCurl)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
1
getUser("Sanpandi")
getUser("@imVkohli")
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
getUser("@imVkohli")
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
getUser("@Sanpandi")
get_all_tweets()
#getUser("@Sanpandi")
get_all_tweets(query = NULL,start_tweets = '2023-12-01T00:00:00Z',end_tweets = '2023-12-02T00:00:00Z')
#getUser("@Sanpandi")
get_all_tweets(query = NULL,start_tweets = '2023-12-01T00:00:00Z',end_tweets = '2023-12-02T00:00:00Z')
get_all_tweets(query = NULL,start_tweets = '2023-12-01T00:00:00Z',
end_tweets = '2023-12-02T00:00:00Z',
bearer_token = get_bearer(),
data_path = "data",
n = 500)
get_all_tweets(query = NULL,start_tweets = '2023-12-01T00:00:00Z',
end_tweets = '2023-12-02T00:00:00Z',
bearer_token = TWITTER_BEARER,
data_path = "data",
n = 500)
#library(RJSONIO)
#library(stringr)
#library(RCurl)
TWITTER_BEARER='AAAAAAAAAAAAAAAAAAAAAKBmAwAAAAAAEXyiBS3j4oi4kgw7zfgxnWfrkE0%3DalL5M4CtCpYwKj4Ej7nBzSPNFVPsqqwFjKhwaWVcMpiWx4viBL'
#getUser("@Sanpandi")
get_all_tweets(query = NULL,start_tweets = '2023-12-01T00:00:00Z',
end_tweets = '2023-12-02T00:00:00Z',
bearer_token = TWITTER_BEARER,
data_path = "data",
n = 500)
detach("package:academictwitteR", unload = TRUE)
library(twitteR)
consumer_key <- 'bBLxDJLMjjFmXkqncJfqD3tzj'
consumer_secret <- 'IaWMr8LFu4wzNhqLb3M3AHWIdOKWAZ17Y7ZgAvjafBbmQJw2lG'
access_token <- '167398637-Poi1yCgYqRiHhcD8g2q0YisRFkS4CRkDeJ3YfAwS'
access_key <- '1zSHMUDuG8Vqwud9wnAnn7fk9F4zUWVClPumFbId4UkIL'
setup_twitter_oauth(consumer_key,consumer_secret,access_token,access_key)
